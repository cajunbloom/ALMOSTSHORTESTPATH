#read the input
input_line = input().split()
#number of pipes being ordered
num_of_pipes = int(input_line[0])
#lenght we have
current_length = int(input_line[1])

#arrays for price of pipe
pipe_prices = []
#pipe length the client wants
pipe_lengths = []

#for the number of pipes
for i in range(num_of_pipes):
    #elements from user input split
    pipe_data = input().split()
    #length of pipe being oredered
    length = int(pipe_data[0])
    #convert second element to price of pipe
    price = int(pipe_data[1])
    #add length of pipe being ordered to pipe_lenghts array
    pipe_lengths.append(length)
    #add price of pipe to price array
    pipe_prices.append(price)

# max value of the pipes all the way up to the pipe we currently have +1 to account for leftover piece
storage = [0] * (current_length + 1)

# go over all possible ways up to the current size pipe
for i in range(current_length + 1):
    # Iterate over each pipe lenght and value
    for j in range(num_of_pipes):
        if i >= pipe_lengths[j]:
            storage[i] = max(storage[i], storage[i - pipe_lengths[j]] + pipe_prices[j])

print(storage[current_length])
